name: Build portable Electron versions

on:
    push:
        branches:
            - main
        paths:
            - "package.json"

permissions:
    contents: write
    pages: write
    id-token: write
    pull-requests: write
    issues: write
    actions: read
    checks: write

jobs:
    vite-build:
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@main
            - name: Check if version bumped
              id: version_check
              run: |
                  git fetch origin ${{ github.ref }} --depth=2
                  PREV_VERSION=$(git show HEAD^:package.json | jq -r .version)
                  CURR_VERSION=$(jq -r .version package.json)
                  echo "Previous version: $PREV_VERSION"
                  echo "Current version: $CURR_VERSION"
                  if [ "$PREV_VERSION" = "$CURR_VERSION" ]; then
                    echo "No version bump detected. Skipping workflow."
                    exit 78
                  fi

            - name: Set up Node.js
              uses: actions/setup-node@main
              with:
                  node-version: 22
                  cache: "npm"

            - name: Install Dependencies
              run: npm ci

            - name: Build Vite App
              run: npm run vitebuildcli

            - name: Zip dist-react and dist-electron
              run: |
                  zip -r vite-builds.zip dist-react dist-electron

            - name: Upload Vite Build Artifacts Zip
              uses: actions/upload-artifact@main
              with:
                  name: vite-builds-zip
                  path: vite-builds.zip

    build:
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                include:
                    - os: macos-latest
                      arch: [x64, arm64]
                    - os: windows-latest
                      arch: [x64, arm64]

        runs-on: ${{ matrix.os }}
        needs: vite-build

        outputs:
            mac_x64_artifact_id: ${{ steps.upload-mac-x64.outputs.artifact-id }}
            mac_arm64_artifact_id: ${{ steps.upload-mac-arm64.outputs.artifact-id }}
            win_x64_artifact_id: ${{ steps.upload-win-x64.outputs.artifact-id }}
            win_arm64_artifact_id: ${{ steps.upload-win-arm64.outputs.artifact-id }}
            linux_x64_artifact_id: ${{ steps.upload-linux-x64.outputs.artifact-id }}

        steps:
            - name: Checkout code
              uses: actions/checkout@main

            - name: Download Vite Build Artifacts Zip
              uses: actions/download-artifact@main
              with:
                  name: vite-builds-zip
                  path: .

            - name: Unzip dist-react and dist-electron
              run: |
                  unzip -o vite-builds.zip
                  # dist-react and dist-electron are now in the workspace root

            - name: Get version from package.json
              id: get_version
              run: |
                  echo "PACKAGE_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

            - name: Set up Node.js
              uses: actions/setup-node@main
              with:
                  node-version: 22
                  cache: "npm"

            - name: Set up Python (macOS only)
              if: matrix.os == 'macos-latest'
              uses: actions/setup-python@main
              with:
                  python-version: "3.13"

            - name: Install Python virtual environment (macOS only)
              if: matrix.os == 'macos-latest'
              run: |
                  python3 -m venv venv
                  source venv/bin/activate
                  pip install --upgrade pip setuptools

            - name: Ensure package-lock.json is up to date
              run: npm install
              env:
                  CI: true

            - name: Install dependencies (Ubuntu and macOS)
              if: matrix.os != 'windows-latest'
              run: |
                  if [ "${{ matrix.os }}" = "macos-latest" ]; then
                    source venv/bin/activate
                    npm install appdmg --save-dev
                  fi
                  npm ci

            - name: Install dependencies (Windows)
              if: matrix.os == 'windows-latest'
              run: npm ci

            - name: Build Electron app (macOS)
              if: matrix.os == 'macos-latest'
              run: |
                  source venv/bin/activate
                  for arch in ${{ join(matrix.arch, ' ') }}; do
                    npx electron-forge make --arch=$arch
                    mkdir -p out/make-mac-$arch
                    mv out/make/* out/make-mac-$arch/
                  done

            - name: Build Electron app (Windows)
              if: matrix.os == 'windows-latest'
              run: |
                  $architectures = @("x64", "arm64")
                  foreach ($arch in $architectures) {
                      npx electron-forge make --arch=$arch
                      New-Item -ItemType Directory -Force -Path "out/make-win-$arch"
                      Move-Item -Path "out/make/*" -Destination "out/make-win-$arch/"
                  }
              env:
                  CSC_IDENTITY_AUTO_DISCOVERY: false

            - name: Build Electron app (Linux)
              if: matrix.os == 'ubuntu-latest'
              run: |
                  npx electron-forge make
                  mkdir -p out/make-linux
                  mv out/make/* out/make-linux/
              env:
                  CSC_IDENTITY_AUTO_DISCOVERY: false

            - name: Upload Artifacts (macOS x64)
              if: matrix.os == 'macos-latest' && contains(matrix.arch, 'x64')
              id: upload-mac-x64
              uses: actions/upload-artifact@main
              with:
                  name: iSpeakerReact-macos-x64
                  path: out/make-mac-x64

            - name: Upload Artifacts (macOS arm64)
              if: matrix.os == 'macos-latest' && contains(matrix.arch, 'arm64')
              id: upload-mac-arm64
              uses: actions/upload-artifact@main
              with:
                  name: iSpeakerReact-macos-arm64
                  path: out/make-mac-arm64

            - name: Upload Artifacts (Windows x64)
              if: matrix.os == 'windows-latest' && contains(matrix.arch, 'x64')
              id: upload-win-x64
              uses: actions/upload-artifact@main
              with:
                  name: iSpeakerReact-windows-x64
                  path: out/make-win-x64

            - name: Upload Artifacts (Windows arm64)
              if: matrix.os == 'windows-latest' && contains(matrix.arch, 'arm64')
              id: upload-win-arm64
              uses: actions/upload-artifact@main
              with:
                  name: iSpeakerReact-windows-arm64
                  path: out/make-win-arm64

            - name: Upload Artifacts (Linux x64)
              if: matrix.os == 'ubuntu-latest'
              id: upload-linux-x64
              uses: actions/upload-artifact@main
              with:
                  name: iSpeakerReact-linux-x64
                  path: out/make-linux

    release:
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout code
              uses: actions/checkout@main
              with:
                  fetch-depth: 0

            - name: Download all build artifacts
              uses: actions/download-artifact@main
              with:
                  path: ./release

            - name: Get version from package.json
              id: get_version
              run: |
                  echo "PACKAGE_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

            - name: Get latest tag
              id: get_tag
              run: |
                  latest_tag=$(git tag | sort -V | tail -n 1)
                  if [ -z "$latest_tag" ]; then
                    new_tag="v${{ env.PACKAGE_VERSION }}"
                  else
                    random_str=$(openssl rand -hex 4)
                    version_prefix=${{ env.PACKAGE_VERSION }}
                    new_tag="${version_prefix}-${random_str}"
                  fi
                  echo "LATEST_TAG=$new_tag" >> $GITHUB_ENV

            - name: Create tag
              run: |
                  git tag ${{ env.LATEST_TAG }}
                  git push origin ${{ env.LATEST_TAG }}

            - name: Create GitHub release
              id: create_release
              uses: softprops/action-gh-release@c43d7637b9b9ce3e953168c325d27253a5d48d8e
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ env.LATEST_TAG }}
                  name: v${{ env.PACKAGE_VERSION }}
                  body: |
                      Release version ${{ env.PACKAGE_VERSION }} of the project.

            - name: Display the release directory structure
              run: ls -R ./release

            - name: Upload Release Assets
              run: |
                  for artifact in ./release/iSpeakerReact-*; do
                    if [ -d "$artifact" ]; then
                      find "$artifact" -type f -print0 | while IFS= read -r -d '' file; do
                        if [[ "$file" == *"RELEASES"* || "$file" == *.nupkg ]]; then
                          echo "Skipping $file"
                          continue
                        fi
                        echo "Attempting to upload: $file"
                        if gh release upload "${{ env.LATEST_TAG }}" "$file" --clobber; then
                          echo "Successfully uploaded: $file"
                        else
                          echo "Failed to upload: $file"
                        fi
                      done
                    else
                      echo "No artifact found in $artifact"
                    fi
                  done
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
